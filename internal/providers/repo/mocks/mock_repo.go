// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=./mocks/mock_repo.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	entity "github.com/classydevv/fulfillment/internal/providers/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderRepo is a mock of ProviderRepo interface.
type MockProviderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProviderRepoMockRecorder
	isgomock struct{}
}

// MockProviderRepoMockRecorder is the mock recorder for MockProviderRepo.
type MockProviderRepoMockRecorder struct {
	mock *MockProviderRepo
}

// NewMockProviderRepo creates a new mock instance.
func NewMockProviderRepo(ctrl *gomock.Controller) *MockProviderRepo {
	mock := &MockProviderRepo{ctrl: ctrl}
	mock.recorder = &MockProviderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderRepo) EXPECT() *MockProviderRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProviderRepo) Delete(arg0 context.Context, arg1 entity.ProviderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderRepoMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProviderRepo)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockProviderRepo) GetAll(arg0 context.Context) ([]*entity.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*entity.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProviderRepoMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProviderRepo)(nil).GetAll), arg0)
}

// Store mocks base method.
func (m *MockProviderRepo) Store(arg0 context.Context, arg1 *entity.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockProviderRepoMockRecorder) Store(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockProviderRepo)(nil).Store), arg0, arg1)
}

// Update mocks base method.
func (m *MockProviderRepo) Update(arg0 context.Context, arg1 entity.ProviderID, arg2 *entity.Provider) (*entity.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProviderRepoMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProviderRepo)(nil).Update), arg0, arg1, arg2)
}
