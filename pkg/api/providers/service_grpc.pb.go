// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/providers/service.proto

package providers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProvidersService_ProviderCreate_FullMethodName  = "/github.com.classydevv.fulfillment.providers.ProvidersService/ProviderCreate"
	ProvidersService_ProviderListAll_FullMethodName = "/github.com.classydevv.fulfillment.providers.ProvidersService/ProviderListAll"
	ProvidersService_ProviderUpdate_FullMethodName  = "/github.com.classydevv.fulfillment.providers.ProvidersService/ProviderUpdate"
	ProvidersService_ProviderDelete_FullMethodName  = "/github.com.classydevv.fulfillment.providers.ProvidersService/ProviderDelete"
)

// ProvidersServiceClient is the client API for ProvidersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvidersServiceClient interface {
	ProviderCreate(ctx context.Context, in *ProviderCreateRequest, opts ...grpc.CallOption) (*ProviderCreateResponse, error)
	ProviderListAll(ctx context.Context, in *ProviderListAllRequest, opts ...grpc.CallOption) (*ProviderListAllResponse, error)
	ProviderUpdate(ctx context.Context, in *ProviderUpdateRequest, opts ...grpc.CallOption) (*ProviderUpdateResponse, error)
	ProviderDelete(ctx context.Context, in *ProviderDeleteRequest, opts ...grpc.CallOption) (*ProviderDeleteResponse, error)
}

type providersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvidersServiceClient(cc grpc.ClientConnInterface) ProvidersServiceClient {
	return &providersServiceClient{cc}
}

func (c *providersServiceClient) ProviderCreate(ctx context.Context, in *ProviderCreateRequest, opts ...grpc.CallOption) (*ProviderCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProviderCreateResponse)
	err := c.cc.Invoke(ctx, ProvidersService_ProviderCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providersServiceClient) ProviderListAll(ctx context.Context, in *ProviderListAllRequest, opts ...grpc.CallOption) (*ProviderListAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProviderListAllResponse)
	err := c.cc.Invoke(ctx, ProvidersService_ProviderListAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providersServiceClient) ProviderUpdate(ctx context.Context, in *ProviderUpdateRequest, opts ...grpc.CallOption) (*ProviderUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProviderUpdateResponse)
	err := c.cc.Invoke(ctx, ProvidersService_ProviderUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providersServiceClient) ProviderDelete(ctx context.Context, in *ProviderDeleteRequest, opts ...grpc.CallOption) (*ProviderDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProviderDeleteResponse)
	err := c.cc.Invoke(ctx, ProvidersService_ProviderDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvidersServiceServer is the server API for ProvidersService service.
// All implementations must embed UnimplementedProvidersServiceServer
// for forward compatibility.
type ProvidersServiceServer interface {
	ProviderCreate(context.Context, *ProviderCreateRequest) (*ProviderCreateResponse, error)
	ProviderListAll(context.Context, *ProviderListAllRequest) (*ProviderListAllResponse, error)
	ProviderUpdate(context.Context, *ProviderUpdateRequest) (*ProviderUpdateResponse, error)
	ProviderDelete(context.Context, *ProviderDeleteRequest) (*ProviderDeleteResponse, error)
	mustEmbedUnimplementedProvidersServiceServer()
}

// UnimplementedProvidersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProvidersServiceServer struct{}

func (UnimplementedProvidersServiceServer) ProviderCreate(context.Context, *ProviderCreateRequest) (*ProviderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderCreate not implemented")
}
func (UnimplementedProvidersServiceServer) ProviderListAll(context.Context, *ProviderListAllRequest) (*ProviderListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderListAll not implemented")
}
func (UnimplementedProvidersServiceServer) ProviderUpdate(context.Context, *ProviderUpdateRequest) (*ProviderUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderUpdate not implemented")
}
func (UnimplementedProvidersServiceServer) ProviderDelete(context.Context, *ProviderDeleteRequest) (*ProviderDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderDelete not implemented")
}
func (UnimplementedProvidersServiceServer) mustEmbedUnimplementedProvidersServiceServer() {}
func (UnimplementedProvidersServiceServer) testEmbeddedByValue()                          {}

// UnsafeProvidersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvidersServiceServer will
// result in compilation errors.
type UnsafeProvidersServiceServer interface {
	mustEmbedUnimplementedProvidersServiceServer()
}

func RegisterProvidersServiceServer(s grpc.ServiceRegistrar, srv ProvidersServiceServer) {
	// If the following call pancis, it indicates UnimplementedProvidersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProvidersService_ServiceDesc, srv)
}

func _ProvidersService_ProviderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvidersServiceServer).ProviderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvidersService_ProviderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvidersServiceServer).ProviderCreate(ctx, req.(*ProviderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvidersService_ProviderListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvidersServiceServer).ProviderListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvidersService_ProviderListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvidersServiceServer).ProviderListAll(ctx, req.(*ProviderListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvidersService_ProviderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvidersServiceServer).ProviderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvidersService_ProviderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvidersServiceServer).ProviderUpdate(ctx, req.(*ProviderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvidersService_ProviderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvidersServiceServer).ProviderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProvidersService_ProviderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvidersServiceServer).ProviderDelete(ctx, req.(*ProviderDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProvidersService_ServiceDesc is the grpc.ServiceDesc for ProvidersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvidersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.classydevv.fulfillment.providers.ProvidersService",
	HandlerType: (*ProvidersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProviderCreate",
			Handler:    _ProvidersService_ProviderCreate_Handler,
		},
		{
			MethodName: "ProviderListAll",
			Handler:    _ProvidersService_ProviderListAll_Handler,
		},
		{
			MethodName: "ProviderUpdate",
			Handler:    _ProvidersService_ProviderUpdate_Handler,
		},
		{
			MethodName: "ProviderDelete",
			Handler:    _ProvidersService_ProviderDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/providers/service.proto",
}
